// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// shannonEnDiscrete
double shannonEnDiscrete(NumericVector x, bool normalize, bool discretize);
RcppExport SEXP _MethQuant_shannonEnDiscrete(SEXP xSEXP, SEXP normalizeSEXP, SEXP discretizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< bool >::type discretize(discretizeSEXP);
    rcpp_result_gen = Rcpp::wrap(shannonEnDiscrete(x, normalize, discretize));
    return rcpp_result_gen;
END_RCPP
}
// sampleEn
double sampleEn(NumericVector x, int m, double r);
RcppExport SEXP _MethQuant_sampleEn(SEXP xSEXP, SEXP mSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleEn(x, m, r));
    return rcpp_result_gen;
END_RCPP
}
// mhl
double mhl(NumericVector x);
RcppExport SEXP _MethQuant_mhl(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mhl(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MethQuant_shannonEnDiscrete", (DL_FUNC) &_MethQuant_shannonEnDiscrete, 3},
    {"_MethQuant_sampleEn", (DL_FUNC) &_MethQuant_sampleEn, 3},
    {"_MethQuant_mhl", (DL_FUNC) &_MethQuant_mhl, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MethQuant(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
